import Room from "./room";

/**
 * Add a new Room object into the arraylist of Room
 * @param {String} player The indentifier of player, generated by getUniqueID method from auth.js
 * @param {String} mode define single mode or multiple mode of the room. 'single'/'Multiple'
 * @param {[Room]} roomList The room list initilized by server
 */
export const createRoom = (player, mode='single', roomList) => {
  const room = new Room(mode);
  room.join(player);
  roomList.push(room);
};

/**
 * Search for empty room in the roomList and join automatically when there is available position
 * For multiplayer mode use only
 * @param {String} player The indentifier of player, generated by getUniqueID method from auth.js
 * @param {[{}]} roomList The room list initilized by server
 */
export const joinOrCreateMultipleGame = (player, roomList) => {
  const room = roomList.find(r => !r.isFull());
  if (!room) {
    createRoom(player, "multiple", roomList);
    return;
  }
  room.join(player);
};

/**
 * Remove Room object from the list when there is no player in the room.
 * @param {*} roomList
 * @param {*} room
 */
export const removeEmptyRoom = (roomList, room) => {
  const index = roomList.indexOf(room);
  if (roomList(index).isEmpty()) roomList.splice(index, 1);
};

export const getRoomWithSessionID = (roomList, sessionId) => {
  return roomList.find(room => room.players.includes(sessionId));
};
